
ID:
null
ExeStack:
[stack=int v;Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
null
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
null
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
null
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
null
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
null
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
2
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
null
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
2
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
null
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(1,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[1->22]

ID:
1
ExeStack:
[stack=int v;Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
2
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
2
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(4,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[4->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[4->30]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[4->30]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(v);print(ReadHeap(a))
v=32]
SymTable
[map=a->(4,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[4->30]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
v->32]
Out
[[10, 30, 32, 30]]
FileTable
file=
HeapTable
[4->30]

ID:
1
ExeStack:
[stack=int v;Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
3
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
3
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
3
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
3
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(5,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[5->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[5->30]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[5->30]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(v);print(ReadHeap(a))
v=32]
SymTable
[map=a->(5,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[5->30]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
v->32]
Out
[[10, 30, 32, 30]]
FileTable
file=
HeapTable
[5->30]

ID:
1
ExeStack:
[stack=int v;Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
2
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
2
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(12,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[12->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[12->30]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[12->30]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(12,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(v);print(ReadHeap(a))
v=32]
SymTable
[map=a->(12,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[12->30]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(12,int)
v->32]
Out
[[10, 30, 32, 30]]
FileTable
file=
HeapTable
[12->30]

ID:
1
ExeStack:
[stack=int v;Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
int v]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
Ref(int) a]
SymTable
[map=v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=v=10;new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
v=10]
SymTable
[map=a->(0,int)
v->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=new (a,22);Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))
new (a,22)]
SymTable
[map=a->(0,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)));print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))
Fork(WriteHeap (a,30);v=32;print(v);print(ReadHeap(a)))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
4
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
4
ExeStack:
[stack=WriteHeap (a,30);v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
4
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
4
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))
WriteHeap (a,30)]
SymTable
[map=a->(2,int)
v->10]
Out
[[]]
FileTable
file=
HeapTable
[2->22]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[2->30]

ID:
1
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=v=32;print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->10]
Out
[[10]]
FileTable
file=
HeapTable
[2->30]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(v);print(ReadHeap(a))
v=32]
SymTable
[map=a->(2,int)
v->10]
Out
[[10, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(v);print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(ReadHeap(a))
print(v)]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30, 32]]
FileTable
file=
HeapTable
[2->30]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
v->32]
Out
[[10, 30, 32, 30]]
FileTable
file=
HeapTable
[2->30]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(1,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))
new (a,counter)]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=print(ReadHeap(a))]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->10]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
3
ExeStack:
[stack=]
SymTable
[map=a->(1,int)
counter->0]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
4
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
5
ExeStack:
[stack=]
SymTable
[map=a->(2,int)
counter->1]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
6
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
7
ExeStack:
[stack=]
SymTable
[map=a->(3,int)
counter->2]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
8
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
9
ExeStack:
[stack=]
SymTable
[map=a->(4,int)
counter->3]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
10
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
11
ExeStack:
[stack=]
SymTable
[map=a->(5,int)
counter->4]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
12
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
13
ExeStack:
[stack=]
SymTable
[map=a->(6,int)
counter->5]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
14
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
15
ExeStack:
[stack=]
SymTable
[map=a->(7,int)
counter->6]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
16
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
17
ExeStack:
[stack=]
SymTable
[map=a->(8,int)
counter->7]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
18
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
19
ExeStack:
[stack=]
SymTable
[map=a->(9,int)
counter->8]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
20
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
21
ExeStack:
[stack=]
SymTable
[map=a->(10,int)
counter->9]
Out
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
FileTable
file=
HeapTable
[1->0
2->1
3->2
4->3
5->4
6->5
7->6
8->7
9->8
10->9]

ID:
1
ExeStack:
[stack=Ref(int) a;int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Ref(int) a]
SymTable
[map=]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=int counter;WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
int counter]
SymTable
[map=a->(0,int)]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1
Fork(Fork(new (a,counter);print(ReadHeap(a))))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}
counter=counter+1]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=Fork(new (a,counter);print(ReadHeap(a)))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
1
ExeStack:
[stack=WhileStmt(counter<10){Fork(Fork(new (a,counter);print(ReadHeap(a))));counter=counter+1}]
SymTable
[map=a->(0,int)
counter->1]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
2
ExeStack:
[stack=]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]

ID:
3
ExeStack:
[stack=new (a,counter);print(ReadHeap(a))]
SymTable
[map=a->(0,int)
counter->0]
Out
[[]]
FileTable
file=
HeapTable
[]
